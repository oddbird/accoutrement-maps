// Map Tests
// =========

@import '../../node_modules/sass-true/sass/true';
@import '../../sass/maps';


$map: (
  one: (
    hello: (
      world: new york,
      pizza: sausage,
    ),
    goodbye: fugard,
  ),
  two: cheese,
);


// Truncate List
// -------------
@include test-module('_truncate-list [function]') {
  @include test('Truncate a list') {
    $list: one two three four;
    $test: _truncate-list($list, 3);
    $expect: one two three;
    @include assert-equal($test, $expect,
      'Returns a list truncated to a given number of list items.');
  }
}


// Deep Get
// --------
@include test-module('deep-get [function]') {
  @include test('Access a nested key') {
    $test: deep-get($map, one, hello, world);
    $expect: new york;
    @include assert-equal($test, $expect,
      'Returns value of deep key.');
  }
}


// Deep Set
// --------
@include test-module('deep-set [function]') {
  @include test('Set a new value on a nested key') {
    $test: deep-set($map, one, hello, pizza, yum);
    $expect: (
      one: (
        hello: (
          world: new york,
          pizza: yum,
        ),
        goodbye: fugard,
      ),
      two: cheese,
    );
    @include assert-equal($test, $expect,
      'Returns map with deep value adjusted.');
  }

  @include test('Create a new nested key-value pair') {
    $test: deep-set($map, one, monkey, three, test);
    $expect: (
      one: (
        hello: (
          world: new york,
          pizza: sausage,
        ),
        goodbye: fugard,
        monkey: (
          three: test,
        ),
      ),
      two: cheese,
    );
    @include assert-equal($test, $expect,
      'Set deep value even in new key path.');
  }
}


// Deep Has-Key
// ------------
@include test-module('deep-has-key [function]') {
  @include test('Find if a nested key exists') {
    $test: deep-has-key($map, one, hello, world);
    $expect: true;
    @include assert-equal($test, $expect,
      'Returns true for existing deep key.');

    $test: deep-has-key($map, one, hello, neverland);
    $expect: false;
    @include assert-equal($test, $expect,
      'Returns false for non-existing deep key.');
  }
}


// deep-merge
// ----------
@include test-module('deep-merge [function]') {
  @include test('Merge two nested maps') {
    $new-map: (
      one: (
        hello: (
          cocktail: pop,
        ),
        
      )
    );
    $test: deep-merge($map, $new-map);
    $expect: (
      one: (
        hello: (
          world: new york,
          pizza: sausage,
          cocktail: pop,
        ),
        goodbye: fugard,
      ),
      two: cheese,
    );
    @include assert-equal($test, $expect,
      'Merges nested maps.');
  }

  @include test('Merge two nested maps with matching keys') {
    $new-map: (
      one: (
        hello: (
          world: jenin,
        ),
        
      )
    );
    $test: deep-merge($map, $new-map);
    $expect: (
      one: (
        hello: (
          world: jenin,
          pizza: sausage,
        ),
        goodbye: fugard,
      ),
      two: cheese,
    );
    @include assert-equal($test, $expect,
      'Merges nested maps with matching keys.');
  }
}


@include report;
